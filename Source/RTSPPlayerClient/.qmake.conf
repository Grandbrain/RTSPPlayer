#------------------------------------------------------------------------------#
#                              Common variables                                #
#------------------------------------------------------------------------------#

ROOT_PATH           =   $$clean_path($$PWD/../../)
EXTERNAL_PATH       =   $$absolute_path(External, $$ROOT_PATH)
SOURCE_PATH         =   $$absolute_path(Source, $$ROOT_PATH)


#------------------------------------------------------------------------------#
#                             Macros and functions.                            #
#------------------------------------------------------------------------------#

# @brief    Find platform (OS) name.
# @return   Platform (OS) name in lowercase.
defineReplace(find_platform_name) {
    PLATFORM_NAME = $$lower($$QMAKE_HOST.os)
    return ($$PLATFORM_NAME)
}

# @brief    Find host architecture type.
# @return   Host architecture type in lowercase.
defineReplace(find_architecture_type) {
    linux-g++:      QMAKE_TARGET.arch   =   $$QMAKE_HOST.arch
    linux-g++-32:   QMAKE_TARGET.arch   =   x86
    linux-g++-64:   QMAKE_TARGET.arch   =   x86_64

    ARCHITECTURE_TYPE = $$lower($$QMAKE_TARGET.arch)
    return ($$ARCHITECTURE_TYPE)
}

# @brief    Find target build type.
# @return   Target build type in lowercase.
defineReplace(find_build_type) {
    CONFIG (debug, debug|release):      BUILD_TYPE = debug
    CONFIG (release, debug|release):    BUILD_TYPE = release
    return ($$lower($$BUILD_TYPE))
}

# @brief        Find dependency directory.
# @param    $$1 Parent directory.
# @param    $$2 Regular expression pattern.
# @return       Dependency directory.
defineReplace(find_directory) {
    PARENT = $$1
    PATTERN = $$2
    CHILDREN_ABSOLUTE = $$files($$PARENT/*)
    for (CHILD_ABSOLUTE, CHILDREN_ABSOLUTE) {
        CHILD_RELATIVE = $$relative_path($$CHILD_ABSOLUTE, $$PARENT)
        CHILD_FOUND = $$find(CHILD_RELATIVE, $$PATTERN)
        !isEmpty(CHILD_FOUND): return ($$lower($$first(CHILD_FOUND)))
    }
}

# @brief        Find absolute dependency library path.
# @param    $$1 Parent directory.
# @param    $$2 Regular expression pattern.
# @return       Absolute dependency path.
defineReplace(find_library_path) {
    PARENT              = $$1
    PATTERN             = $$2
    DEPENDENCY_NAME     = $$find_directory($$PARENT, $$PATTERN)
    PLATFORM_NAME       = $$find_platform_name()
    ARCHITECTURE_TYPE   = $$find_architecture_type()
    BUILD_TYPE          = $$find_build_type()
    DEPENDENCY_PATH     = $$absolute_path($$DEPENDENCY_NAME, $$PARENT)
    DEPENDENCY_PATH     = $$absolute_path("lib", $$DEPENDENCY_PATH)
    DEPENDENCY_PATH     = $$absolute_path($$PLATFORM_NAME, $$DEPENDENCY_PATH)
    DEPENDENCY_PATH     = $$absolute_path($$ARCHITECTURE_TYPE, $$DEPENDENCY_PATH)
    DEPENDENCY_PATH     = $$absolute_path($$BUILD_TYPE, $$DEPENDENCY_PATH)
    return ($$DEPENDENCY_PATH)
}

# @brief        Find absolute dependency include path.
# @param    $$1 Parent directory.
# @param    $$2 Regular expression pattern.
# @return       Absolute dependency path.
defineReplace(find_include_path) {
    PARENT              = $$1
    PATTERN             = $$2
    DEPENDENCY_NAME     = $$find_directory($$PARENT, $$PATTERN)
    DEPENDENCY_PATH     = $$absolute_path($$DEPENDENCY_NAME, $$PARENT)
    DEPENDENCY_PATH     = $$absolute_path("include", $$DEPENDENCY_PATH)
    return ($$DEPENDENCY_PATH)
}

# @brief        Find full static library filename.
# @param    $$1 Library base name without prefix and extension.
# @return       Full static library filename.
defineReplace(find_static_library_filename) {
    LIBRARY_NAME = $$1

    win32 {
        LIBRARY_SUFFIX = ".lib"
    }
    else {
        LIBRARY_PREFIX = "lib"
        LIBRARY_SUFFIX = ".a"
    }

    return ($${LIBRARY_PREFIX}$${LIBRARY_NAME}$${LIBRARY_SUFFIX})
}
